// ***********************************************************************
// Assembly         : Api
// Author           : SimonW
// Created          : 05-21-2018
//
// Last Modified By : SimonW
// Last Modified On : 05-21-2018
// ***********************************************************************
// <copyright file="InsolvencyOrdersController.cs" company="Callcredit Information Group.">
// Copyright (c) 2018 Callcredit Information Group. All rights reserved.
// </copyright>
// <summary>Defines the InsolvencyOrdersController</summary>
// ***********************************************************************
using System.Linq;
using System.Threading.Tasks;
using Api.EntityFramework.Entities;
using Api.Telemetry;
using Callcredit.AspNetCore.ProblemJson;
using Callcredit.Domain.Insolvencies.Models;
using Callcredit.Domain.Insolvencies.Repositories;
using Callcredit.Domain.Insolvencies.Resources;
using Callcredit.RESTful.DataAssets;
using Callcredit.RESTful.Services.Hal;
using Callcredit.RESTful.Services.Includes;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Validation;

namespace Api.Controllers
{
    /// <summary>
    /// Class InsolvencyOrdersController.
    /// </summary>
    /// <seealso cref="Microsoft.AspNetCore.Mvc.Controller" />
    [Produces("application/hal+json")]
    [Route("api/uk")]
    [Authorize(Policy = "Query")]
    public class InsolvencyOrdersController : Controller
    {
        private readonly IDataAccessCradle<InsolvencyOrderModel> cradle;
        private readonly IInsolvencyOrdersRepository<InsolvencyOrderModel, InsolvencyOrderEntity> insolvencyOrdersRepository;
        private readonly IInsolvencyOrdersRepository<InsolvencyOrderModel, InsolvencyOrderFlattenedEntity> insolvencyOrdersFlattenedRepository;
        private readonly IIncludeReader includeReader;
        private readonly IPageInformationProvider pageInformationProvider;
        private readonly IHalFormatter<InsolvencyOrderModel> insolvencyOrdersFormatter;
        private readonly IHalCollectionFormatter<InsolvencyOrderModel> insolvencyOrdersCollectionFormatter;
        private readonly ITelemetryClient telemetryClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="InsolvencyOrdersController"/> class.
        /// </summary>
        /// <param name="cradle">
        /// The <see cref="IDataAccessCradle{InsolvencyModel}"/> used to get data from the data store and handle all errors and logging.
        /// </param>
        /// <param name="insolvencyOrdersRepository">
        /// The <see cref="IInsolvencyOrdersRepository{InsolvencyModel, InsolvencyOrderEntity}"/> used to make calls to the data store.
        /// </param>
        /// <param name="insolvencyOrdersFlattenedRepository">
        /// The <see cref="IInsolvencyOrdersRepository{InsolvencyModel, InsolvencyOrderFlattenedEntity}"/> used to make calls to the data store.
        /// </param>
        /// <param name="includeReader">
        /// The <see cref="IIncludeReader"/> used to read the included sub resources requested by the client.
        /// </param>
        /// <param name="pageInformationProvider">
        /// The <see cref="IPageInformationProvider"/> used to create a page information object from the HTTP request information.
        /// request and endpoint configuration.
        /// </param>
        /// <param name="insolvencyOrdersFormatter">
        /// The <see cref="IHalFormatter{InsolvencyModel}"/> used to format single insolvency items in the HAL standard.
        /// </param>
        /// <param name="insolvencyOrdersCollectionFormatter">
        /// The <see cref="IHalCollectionFormatter{InsolvencyModel}"/> used to format insolvency collections in the HAL standard.
        /// </param>
        /// <param name="telemetryClient">
        /// The <see cref="TelemetryClient" /> used to log custom telemetry requests.
        /// </param>
        public InsolvencyOrdersController(
            IDataAccessCradle<InsolvencyOrderModel> cradle,
            IInsolvencyOrdersRepository<InsolvencyOrderModel, InsolvencyOrderEntity> insolvencyOrdersRepository,
            IInsolvencyOrdersRepository<InsolvencyOrderModel, InsolvencyOrderFlattenedEntity> insolvencyOrdersFlattenedRepository,
            IIncludeReader includeReader,
            IPageInformationProvider pageInformationProvider,
            IHalFormatter<InsolvencyOrderModel> insolvencyOrdersFormatter,
            IHalCollectionFormatter<InsolvencyOrderModel> insolvencyOrdersCollectionFormatter,
            ITelemetryClient telemetryClient)
        {
            Requires.NotNull(cradle, nameof(cradle));
            Requires.NotNull(insolvencyOrdersRepository, nameof(insolvencyOrdersRepository));
            Requires.NotNull(insolvencyOrdersFlattenedRepository, nameof(insolvencyOrdersFlattenedRepository));
            Requires.NotNull(includeReader, nameof(includeReader));
            Requires.NotNull(pageInformationProvider, nameof(pageInformationProvider));
            Requires.NotNull(insolvencyOrdersFormatter, nameof(insolvencyOrdersFormatter));
            Requires.NotNull(insolvencyOrdersCollectionFormatter, nameof(insolvencyOrdersCollectionFormatter));
            Requires.NotNull(telemetryClient, nameof(telemetryClient));

            this.cradle = cradle;
            this.insolvencyOrdersRepository = insolvencyOrdersRepository;
            this.insolvencyOrdersFlattenedRepository = insolvencyOrdersFlattenedRepository;
            this.includeReader = includeReader;
            this.pageInformationProvider = pageInformationProvider;
            this.insolvencyOrdersFormatter = insolvencyOrdersFormatter;
            this.insolvencyOrdersCollectionFormatter = insolvencyOrdersCollectionFormatter;
            this.telemetryClient = telemetryClient;
        }

        /// <summary>
        /// Retrieves a paged collection of all Insolvency records
        /// </summary>
        /// <remarks>
        /// Paging:
        /// The page query string is used to select the page index of results to view. For example: ...?page=5
        /// </remarks>
        /// <returns>A paged collections of Insolvency records</returns>
        /// <response code="200">Request fulfilled. The message body contains the page collection of resources.</response>
        /// <response code="204">No information to send back. The HTTP header will not be returned and message body will be empty.</response>
        /// <response code="400">Bad request. The message body will contain details for the validation error that occurred.</response>
        /// <response code="401">Unauthorized. The message body will contain details for the authentication error that occurred.</response>
        /// <response code="403">Forbidden. The message body will contain error details indicating that the client is not authorised to perform the operation.</response>
        /// <response code="404">Not Found. The message body will contain error details indicating that the resource was not found.</response>
        /// <response code="405">Not allowed. The message body will contain error details indicating that the resource does not support verb.</response>
        [ProducesResponseType(typeof(InsolvencyOrderModel), 200)]
        [ProducesResponseType(typeof(InsolvencyOrderModel), 204)]
        [ProducesResponseType(typeof(Problem), 400)]
        [ProducesResponseType(typeof(Problem), 401)]
        [ProducesResponseType(typeof(Problem), 403)]
        [ProducesResponseType(typeof(Problem), 404)]
        [ProducesResponseType(typeof(Problem), 405)]
        [HttpGet("mastered-data/insolvency-orders", Name = DomainResources.InsolvencyOrders)]
        [Authorize(Policy = "Query")]
        public async Task<IActionResult> GetAllInsolvencyOrders()
        {
            using (telemetryClient.StartOperation<DependencyTelemetry>(Telemetry.TelemetryLabels.GetInsolvencyOrders))
            {
                var includes = includeReader.GetIncludes().ToArray();
                var pageInformation = pageInformationProvider.GetPageInformation();

                var data = await cradle.GetPagedDataSetAsync(
                   () => insolvencyOrdersFlattenedRepository.GetAllAsync(pageInformation, includes),
                   () => insolvencyOrdersFlattenedRepository.CountAsync());

                var halResponse = insolvencyOrdersCollectionFormatter.FormatForHal(data);

                return Ok(halResponse);
            }
        }

        /// <summary>
        /// Retrieves a single Insolvency record by Id
        /// </summary>
        /// <param name="insolvencyOrderId">The unique business key of the insolvency.</param>
        /// <returns>A single Insolvency record</returns>
        /// <response code="200">Request fulfilled. The message body contains the page collection of resources.</response>
        /// <response code="204">No information to send back. The HTTP header will not be returned and message body will be empty.</response>
        /// <response code="400">Bad request. The message body will contain details for the validation error that occurred.</response>
        /// <response code="401">Unauthorized. The message body will contain details for the authentication error that occurred.</response>
        /// <response code="403">Forbidden. The message body will contain error details indicating that the client is not authorised to perform the operation.</response>
        /// <response code="404">Not Found. The message body will contain error details indicating that the resource was not found.</response>
        /// <response code="405">Not allowed. The message body will contain error details indicating that the resource does not support verb.</response>
        [ProducesResponseType(typeof(InsolvencyOrderModel), 200)]
        [ProducesResponseType(typeof(InsolvencyOrderModel), 204)]
        [ProducesResponseType(typeof(Problem), 400)]
        [ProducesResponseType(typeof(Problem), 401)]
        [ProducesResponseType(typeof(Problem), 403)]
        [ProducesResponseType(typeof(Problem), 404)]
        [ProducesResponseType(typeof(Problem), 405)]
        [HttpGet("mastered-data/insolvency-orders/{InsolvencyOrderId}", Name = DomainResources.InsolvencyOrder)]
        [ParameterValidation("insolvencyOrderId")]
        [Authorize(Policy = "Query")]
        public async Task<IActionResult> GetInsolvencyOrderById(int insolvencyOrderId)
        {
            using (telemetryClient.StartOperation<DependencyTelemetry>(Telemetry.TelemetryLabels.GetInsolvencyOrder))
            {
                var includes = includeReader.GetIncludes().ToArray();

                var data = await cradle.GetItemAsync(() => insolvencyOrdersFlattenedRepository.GetResultByAsync(insolvencyOrderId, key => key.InsolvencyOrderId, includes));
                var halResponse = insolvencyOrdersFormatter.FormatForHal(data);

                return Ok(halResponse);
            }
        }

        /// <summary>
        /// Retrieves a paged collection of all Insolvency records for a specific Residence Id.
        /// </summary>
        /// <remarks>
        /// Paging:
        /// The page query string is used to select the page index of results to view. For example: ...?page=5
        /// </remarks>
        /// <param name="residenceId">The residence unique key by which to filter.</param>
        /// <returns>A paged collections of Insolvency records.</returns>
        /// <response code="200">Request fulfilled. The message body contains the page collection of resources.</response>
        /// <response code="204">No information to send back. The HTTP header will not be returned and message body will be empty.</response>
        /// <response code="400">Bad request. The message body will contain details for the validation error that occurred.</response>
        /// <response code="401">Unauthorized. The message body will contain details for the authentication error that occurred.</response>
        /// <response code="403">Forbidden. The message body will contain error details indicating that the client is not authorised to perform the operation.</response>
        /// <response code="404">Not Found. The message body will contain error details indicating that the resource was not found.</response>
        /// <response code="405">Not allowed. The message body will contain error details indicating that the resource does not support verb.</response>
        [ProducesResponseType(typeof(InsolvencyOrderModel), 200)]
        [ProducesResponseType(typeof(InsolvencyOrderModel), 204)]
        [ProducesResponseType(typeof(Problem), 400)]
        [ProducesResponseType(typeof(Problem), 401)]
        [ProducesResponseType(typeof(Problem), 403)]
        [ProducesResponseType(typeof(Problem), 404)]
        [ProducesResponseType(typeof(Problem), 405)]
        [HttpGet("population-map/residences/{ResidenceId}/insolvency-orders", Name = "InsolvencyOrdersByResidenceId")]
        [ParameterValidation("residenceId")]
        [Authorize(Policy = "Query")]
        public async Task<IActionResult> GetInsolvencyOrdersByResidenceId(int residenceId)
        {
            using (telemetryClient.StartOperation<DependencyTelemetry>(Telemetry.TelemetryLabels.GetInsolvencyOrdersForResidence))
            {
                var includes = includeReader.GetIncludes().ToArray();
                var pageInformation = pageInformationProvider.GetPageInformation();

                var data = await cradle.GetPagedDataSetAsync(
                    () => insolvencyOrdersFlattenedRepository.GetResultsByAsync(residenceId, insolvency => insolvency.ResidenceId, pageInformation, includes),
                    () => insolvencyOrdersFlattenedRepository.CountByAsync(residenceId, insolvency => insolvency.ResidenceId, includes));

                var halResponse = insolvencyOrdersCollectionFormatter.FormatForHal(data);

                return Ok(halResponse);
            }
        }
    }
}
