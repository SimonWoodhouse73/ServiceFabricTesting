using System.Linq;
using System.Threading.Tasks;
using Api.EntityFramework.Entities;
using Api.Telemetry;
using Callcredit.AspNetCore.ProblemJson;
using Callcredit.Domain.Insolvencies.Models;
using Callcredit.Domain.Insolvencies.Repositories;
using Callcredit.Domain.Insolvencies.Resources;
using Callcredit.RESTful.DataAssets;
using Callcredit.RESTful.Services.Hal;
using Callcredit.RESTful.Services.Includes;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Validation;

namespace Api.Controllers
{
    /// <summary>
    /// Class DisputesController.
    /// </summary>
    /// <seealso cref="Microsoft.AspNetCore.Mvc.Controller" />
    [Produces("application/hal+json")]
    [Route("api/uk")]
    [Authorize(Policy = "Query")]
    public class DisputesController : Controller
    {
        /// <summary>
        /// The cradle
        /// </summary>
        private readonly IDataAccessCradle<DisputeModel> cradle;

        /// <summary>
        /// The disputes repository
        /// </summary>
        private readonly IDisputesRepository<DisputeModel, DisputeEntity> disputesRepository;

        /// <summary>
        /// The include reader
        /// </summary>
        private readonly IIncludeReader includeReader;

        /// <summary>
        /// The page information provider
        /// </summary>
        private readonly IPageInformationProvider pageInformationProvider;

        /// <summary>
        /// The dispute formatter
        /// </summary>
        private readonly IHalFormatter<DisputeModel> disputeFormatter;

        /// <summary>
        /// The dispute collection formatter
        /// </summary>
        private readonly IHalCollectionFormatter<DisputeModel> disputeCollectionFormatter;

        /// <summary>
        /// The telemetry client
        /// </summary>
        private readonly ITelemetryClient telemetryClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="DisputesController" /> class.
        /// </summary>
        /// <param name="cradle">CallCredit data cradle</param>
        /// <param name="disputesRepository">Dispute Repository object</param>
        /// <param name="includeReader">CallCredit Url include parser for reading include options</param>
        /// <param name="pageInformationProvider">Determines how many pages are included in a result set</param>
        /// <param name="disputeFormatter">Creates HAL formatted JSon for Disputes</param>
        /// <param name="disputeCollectionFormatter">Creates HAL formatted collection of disputes</param>
        /// <param name="telemetryClient">The <see cref="TelemetryClient" /> used to log custom telemetry requests.</param>
        public DisputesController(
            IDataAccessCradle<DisputeModel> cradle,
            IDisputesRepository<DisputeModel, DisputeEntity> disputesRepository,
            IIncludeReader includeReader,
            IPageInformationProvider pageInformationProvider,
            IHalFormatter<DisputeModel> disputeFormatter,
            IHalCollectionFormatter<DisputeModel> disputeCollectionFormatter,
            ITelemetryClient telemetryClient)
        {
            Requires.NotNull(cradle, nameof(cradle));
            Requires.NotNull(disputesRepository, nameof(disputesRepository));
            Requires.NotNull(includeReader, nameof(includeReader));
            Requires.NotNull(pageInformationProvider, nameof(pageInformationProvider));
            Requires.NotNull(disputeFormatter, nameof(disputeFormatter));
            Requires.NotNull(disputeCollectionFormatter, nameof(disputeCollectionFormatter));
            Requires.NotNull(telemetryClient, nameof(telemetryClient));

            this.cradle = cradle;
            this.disputesRepository = disputesRepository;
            this.includeReader = includeReader;
            this.pageInformationProvider = pageInformationProvider;
            this.disputeFormatter = disputeFormatter;
            this.disputeCollectionFormatter = disputeCollectionFormatter;
            this.telemetryClient = telemetryClient;
        }

        /// <summary>
        /// Retrieves a paged collection of all Disputes for a Insolvency record.records
        /// </summary>
        /// <param name="insolvencyOrderId">The unique business key of the insolvency.</param>
        /// <returns>A paged collections of Disputes.</returns>
        /// <response code="200">Request fulfilled. The message body contains the page collection of resources.</response>
        /// <response code="204">No information to send back. The HTTP header will not be returned and message body will be empty.</response>
        /// <response code="400">Bad request. The message body will contain details for the validation error that occurred.</response>
        /// <response code="401">Unauthorized. The message body will contain details for the authentication error that occurred.</response>
        /// <response code="403">Forbidden. The message body will contain error details indicating that the client is not authorised to perform the operation.</response>
        /// <response code="404">Not Found. The message body will contain error details indicating that the resource was not found.</response>
        /// <response code="405">Not allowed. The message body will contain error details indicating that the resource does not support verb.</response>
        /// <remarks>Available Query Strings :::
        /// 'page' - The page query string is used to select the page index of results to view. For example: ...?page=5</remarks>
        [ProducesResponseType(typeof(DisputeModel), 200)]
        [ProducesResponseType(typeof(DisputeModel), 204)]
        [ProducesResponseType(typeof(Problem), 400)]
        [ProducesResponseType(typeof(Problem), 401)]
        [ProducesResponseType(typeof(Problem), 403)]
        [ProducesResponseType(typeof(Problem), 404)]
        [ProducesResponseType(typeof(Problem), 405)]
        [HttpGet("mastered-data/insolvency-orders/{InsolvencyOrderId}/disputes", Name = DomainResources.Disputes)]
        [ParameterValidation("InsolvencyOrderId")]
        [Authorize(Policy = "Query")]
        public async Task<IActionResult> GetDisputesByInsolvencyIdAsync(int insolvencyOrderId)
        {
            using (telemetryClient.StartOperation<DependencyTelemetry>(Telemetry.TelemetryLabels.GetDisputesForInsolvency))
            {
                var includes = includeReader.GetIncludes().ToArray();
                var pageInformation = pageInformationProvider.GetPageInformation();

                var data = await cradle.GetPagedDataSetAsync(
                    () => disputesRepository.GetResultsByAsync(insolvencyOrderId, entity => entity.InsolvencyOrderDisputes.Where(i => i.InsolvencyOrderId == insolvencyOrderId).Select(i => i.InsolvencyOrderId).FirstOrDefault(), pageInformation, includes),
                    () => disputesRepository.CountByAsync(insolvencyOrderId, entity => entity.InsolvencyOrderDisputes.Where(i => i.InsolvencyOrderId == insolvencyOrderId).Select(i => i.InsolvencyOrderId).FirstOrDefault(), includes));

                var halResponse = disputeCollectionFormatter.FormatForHal(data);

                return Ok(halResponse);
            }
        }

        /// <summary>
        /// Provides the ability to get a single dispute by its unique business key and associated Insolvency business key.
        /// </summary>
        /// <param name="disputeId">The unique business key of the dispute.</param>
        /// <returns>A paged collections of resources from the entire resource collection.</returns>
        /// <response code="200">The message body contain a representation of the paged collections of resources.</response>
        /// <response code="204">A Content-Type HTTP header shall not be returned. The message body shall be empty.</response>
        /// <response code="400">The message body shall contain error details including the validation errors that occurred.</response>
        /// <response code="401">The message body shall contain error details indicating that the client cannot be authenticated.</response>
        /// <response code="403">The message body shall contain error details indicating that the client is not authorised to perform operation against the resource.</response>
        /// <response code="404">The message body shall contain error details indicating that the resource was not found.</response>
        /// <response code="405">The message body shall contain error details indicating that the resource does not support verb.</response>
        /// <remarks>Available Query Strings :::
        /// 'include' - a string value specifying an embedded resource to include. Can be specified as many times as needed. Example : ?include=myproperty</remarks>
        [ProducesResponseType(typeof(DisputeModel), 200)]
        [ProducesResponseType(typeof(DisputeModel), 204)]
        [ProducesResponseType(typeof(Problem), 400)]
        [ProducesResponseType(typeof(Problem), 401)]
        [ProducesResponseType(typeof(Problem), 403)]
        [ProducesResponseType(typeof(Problem), 404)]
        [ProducesResponseType(typeof(Problem), 405)]
        [HttpGet("mastered-data/insolvency-orders/{InsolvencyOrderId}/disputes/{DisputeId}", Name = DomainResources.Dispute)]
        [ParameterValidation("InsolvencyOrderId")]
        [ParameterValidation("DisputeId")]
        [Authorize(Policy = "Query")]
        public async Task<IActionResult> GetDisputesByDisputeId(int disputeId)
        {
            using (telemetryClient.StartOperation<DependencyTelemetry>(Telemetry.TelemetryLabels.GetDispute))
            {
                var includes = includeReader.GetIncludes().ToArray();

                var data = await cradle.GetItemAsync(
                    () =>
                    disputesRepository.GetResultByAsync(disputeId, dispute => dispute.DisputeId, includes));

                var halResponse = disputeFormatter.FormatForHal(data);

                return Ok(halResponse);
            }
        }
    }
}
