using System;
using System.Collections.Generic;
using System.Net;
using Newtonsoft.Json;

namespace Callcredit.AspNetCore.ProblemJson
{
    /// <summary>
    /// Model representing a Problem Details Object as defined in rfc7807 (https://tools.ietf.org/html/rfc7807)
    /// Supports both standard members and extension members
    /// </summary>
    [JsonObject(ItemReferenceLoopHandling = ReferenceLoopHandling.Ignore)]
    public class Problem
    {
        /// <summary>
        /// The content type that will be applied to the HTTP response.
        /// </summary>
        public const string ContentType = "application/problem+json";

        /// <summary>
        /// A URI reference that identifies the problem type.
        /// The specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
        /// When this member is not present, its value is assumed to be "about:blank".
        /// </summary>
        public Uri Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.
        /// It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code generated by the origin server for this occurrence of the problem.
        /// </summary>
        [JsonIgnore]
        public HttpStatusCode Status { get; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.
        /// It may or may not yield further information if dereferenced.
        /// </summary>
        public Uri Instance { get; set; }

        /// <summary>
        /// Problem type definitions MAY extend the problem details object with additional members.
        /// The dictionary of extension values will be flattened into individual extension members, with the Key (string) being the member name and the Value (object) being the member value.
        /// </summary>
        [JsonIgnore]
        public Dictionary<string, object> Extensions { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Problem"/> class.
        /// Create a problem with the http status code (required)
        /// Note, that even though the status code is optional in the rfc7807 spec, it is required in the outgoing Web API Response, so we are making it a required field through the constructor
        /// </summary>
        /// <param name="status">The <see cref="HttpStatusCode"/> of the problem.</param>
        public Problem(HttpStatusCode status)
        {
            Status = status;
        }
    }
}
